class Chat usingPlatform: platform = Value (
| private utils       = (platform system loadModule: 'util.ns' nextTo: self) usingPlatform: platform.
  private actors      = platform actors.
  private system      = platform system.
  private TransferArray = platform kernel TransferArray.
  private TransferObject = platform kernel TransferObject.
  private Array       = platform kernel Array.
  (* private Dictionary  = platform collections Dictionary. *)
  private Value       = platform kernel Value.
  private Vector      = platform kernel Vector.
  (* private IdentitySet = platform collections IdentitySet. *)

  private SimpleRand  = utils SimpleRand.

  private BenchNoBufferedChats = false.
|
)(
  private class IdPromiseVector new: size = Vector new: size (
  )(
    public append: id and: promise = (
      append: {id. promise}
    )

    public promiseAt: idx = (
      ^ (at: idx) at: 2
    )

    private moveUpRemainingAt: i = (
      lastIdx:: lastIdx - 1.
      i + 1 to: lastIdx do: [:j |
        storage at: j - 1 put: (storage at: j) ]
    )

    public removeById: id <Integer> = (
      doIndexes: [:i |
        | tuple = at: i. |
        (tuple at: 1) = id ifTrue: [
          moveUpRemainingAt: i.
          ^ true ] ].

      ^ false
    )

    public do: block = (
      super do: [:tuple |
        block value: (tuple at: 1) with: (tuple at: 2) ]
    )

    public doWithPromise: block = (
      super do: [:tuple |
        block value: (tuple at: 2) ]
    )

    public doWithTuple: block = (
      super do: block
    )

    public println = (
      'Vector[' print.
      firstIdx print. ', ' print.
      lastIdx print. ': ' print.
      self do: [ :it | '(' print. (it at: 1) print. ':' print. (it at: 2) print. ')' print ].
      ']' println
    )
  ) : (
    public new = (
      ^ self new: 10
    )

    public testRemove = (
      | vec |
      vec:: IdPromiseVector new: 10.
      vec println.

      vec append: 1 and: #a.
      vec append: 2 and: #b.
      vec append: 3 and: #c.
      vec append: 4 and: #d.
      vec append: 5 and: #e.
      vec append: 6 and: #f.
      vec append: 7 and: #g.
      vec append: 8 and: #h.
      vec append: 9 and: #j.
      vec append: 10 and: #k.

      vec println.

      vec removeById: 2.

      vec println.

      vec removeById: 3.
      vec removeById: 8.

      vec println.

      vec removeById: 10.

      vec println.
    )
  )

  class BehaviorFactory new: compute post: post leave: leave invite: invite = Value (
  | private compute = compute.
    private post    = self compute + post.
    private leave   = self post + leave.
    private invite  = self leave + invite.
  |)(
    public determineAction: rand = (
      | pick = rand nextDiceRoll. |
      pick < compute
        ifTrue: [ ^ #compute ].
      pick < post
        ifTrue: [ ^ #post ].
      pick < leave
        ifTrue: [ ^ #leave ].
      pick < invite
        ifTrue: [ ^ #invite ].
      ^ #none
    )
  )

  class Chat new: initiator clientId: initiatorId chatId: chatId = (
  | private initiatorId = initiatorId.
    private chatId = chatId.
    private members <IdPromiseVector[Integer,Promise[Client]]> = IdPromiseVector new.
    private buffer  <Vector[Nil]>                              = Vector new.
  |
    members append: initiatorId and: initiator.
  )(
    public post: payload <Array | nil> accu: accumulator = (
      BenchNoBufferedChats
        ifFalse: [ buffer append: payload ].

      members isEmpty
        ifTrue: [ accumulator <-: stop: #post. #noPromise ]
        ifFalse: [
          accumulator <-: bump: members size act: #post.
          members doWithPromise: [:m |
            m <-: forward: self payload: payload accu: accumulator.
            #noPromise ] ]
    )

    public join: client <Promise[Client]> id: clientId accu: accumulator = (
      members append: clientId and: client.

      BenchNoBufferedChats ifFalse: [
        buffer size > 0 ifTrue: [
          accumulator <-: bump: buffer size act: #ignore.
          buffer do: [:m |
            client <-: forward: self payload: m accu: accumulator.
            #noPromise ] ] ].

      client <-: accept: self chatId: chatId accu: accumulator.
      #noPromise
    )

    public leave: client <Promise[Client]> clientId: clientId <Integer> didLogout: didLogout accu: accumulator = (
      | removed |
      removed:: members removeById: clientId.
      client <-: left: chatId didLogout: didLogout accu: accumulator.
      #noPromise
    )
  )

  class Client create: id dir: directory seed: seed = (
  | private id = id.
    private friends <IdPromiseVector[Integer,Promise[Client]]> = IdPromiseVector new.
    private chats   <IdPromiseVector[Integer,Promise[Chat]]>   = IdPromiseVector new.
    private directory = directory.
    private rand = SimpleRand new: seed.
    private nextChatId ::= 0.
  |)(
    public befriend: client <Promise[Client]> clientId: friendId = (
      friends append: friendId and: client
    )

    public logout = (
      chats isEmpty
        ifTrue: [
          (* TODO: should I avoid using IDs, is this allowed? *)
          directory <-: left: id.
          ^ self ].

      chats doWithPromise: [:c |
        c <-: leave: self clientId: id didLogout: true accu: nil.
        #noPromise ]
    )

    public left: chatId didLogout: didLogout accu: accumulator = (
      chats removeById: chatId.

      (chats isEmpty and: [ didLogout ])
        ifTrue: [ directory <-: left: id. #noPromise ]
        ifFalse: [
          accumulator == nil ifFalse: [
            accumulator <-: stop: #leave. #noPromise ] ]
    )

    public accept: chat <Promise[Chat]> chatId: chatId accu: accumulator = (
      chats append: chatId and: chat.
      accumulator <-: stop: #ignore.
      #noPromise
    )

    public forward: chat <FarReference[Chat]> payload: payload <Array | nil> accu: accumulator = (
      accumulator <-: stop: #postDelivery.
      #noPromise
    )

    private fibonacci: n = (
      | j fibJ fibI |
      n = 0 ifTrue: [ ^ 0 ].
      n = 1 ifTrue: [ ^ 1 ].
      j:: n / 2.
      fibJ:: fibonacci: j.
      fibI:: fibonacci: j - 1.
      n % 2 = 0 ifTrue: [ ^ fibJ * (fibJ * (fibI * 2)) ].
      n % 4 = 1
        ifTrue:  [ ^ ((fibJ * 2) + fibI) * ((fibJ * 2) - fibI) + 2 ]
        ifFalse: [ ^ ((fibJ * 2) + fibI) * ((fibJ * 2) - fibI) - 2 ]
    )

    private post: index accu: accumulator = (
      | chatsSize = chats size. |
      chatsSize = 0 ifTrue: [
        accumulator <-: stop: #none.
        ^ self ].
      (chats promiseAt: index) <-: post: nil accu: accumulator.
      #noPromise
    )

    private leave: index accu: accumulator = (
      | chatsSize = chats size. |
      chatsSize = 0 ifTrue: [
        accumulator <-: stop: #none.
        ^ self ].

      (chats promiseAt: index) <-: leave: self clientId: id didLogout: false accu: accumulator.
      #noPromise
    )

    private compute: accumulator = (
      fibonacci: 35 = 9227465 
        ifTrue: [
          accumulator <-: stop: #compute.
          #noPromise ]
        ifFalse: [ 
          accumulator <-: stop: #error.
        ].
    )

    private invite: accumulator = (
      | createdP <Promise[Chat]> f i invitations chatId |
      nextChatId:: nextChatId + 1.
      chatId:: (id << 20) + nextChatId.
      createdP:: (actors createActorFromValue: Chat) <-: new: self clientId: id chatId: chatId.
      f:: friends asArray.

      rand shuffle: f.

      invitations:: friends size > 0
        ifTrue: [ rand next % friends size ]
        ifFalse: [ 0 ].

      invitations = 0 ifTrue: [
        invitations:: 1 ].

      accumulator <-: bump: invitations act: #invite.

      chats append: chatId and: createdP.

      1 to: invitations do: [:i |
        | k = f at: i. |
        createdP <-: join: (k at: 2) id: (k at: 1) accu: accumulator.
        #noPromise ].
    )

    public act: behavior accu: accumulator = (
      | b index |
      index:: (rand nextInt: chats size) + 1.
      b:: behavior determineAction: rand.

      b = #post ifTrue: [
        post: index accu: accumulator.
        ^ self ].

      b = #leave ifTrue: [
        leave: index accu: accumulator.
        ^ self ].

      b = #compute ifTrue: [
        compute: accumulator.
        ^ self ].

      b = #invite ifTrue: [
        invite: accumulator.
        ^ self ].

      (* else *)
      accumulator <-: stop: #none.
      #noPromise
    )
  )

  class Directory new: seed with: befriend = (
  | private clients <IdPromiseVector[Integer,Promise[Client]]> = IdPromiseVector new.
    private random = SimpleRand new: seed.
    private numBefriends = befriend.
    private completions ::= 0.
    public poker ::= nil.
  |)(
    public login: id = (
      | newClient = (actors createActorFromValue: Client) <-: create: id dir: self seed: random next. |
      clients append: id and: newClient
    )

    public befriend = (
      clients do: [:fId :friend |
        | madeFriends |
        madeFriends:: false.

        [madeFriends] whileFalse: [
          clients do: [:cId :client |
            ((random nextInt: 100) < numBefriends and: [fId <> cId])
              ifTrue: [
                madeFriends:: true.
                client <-: befriend: friend clientId: fId.
                friend <-: befriend: client clientId: cId.
                #noPromise ] ] ] ]
    )

    public left: clientId <Integer> = (
      clients removeById: clientId.

      clients isEmpty ifTrue: [
        clients removeAll.
        poker == nil ifFalse: [
          poker <-: finished.
          #noPromise ]
      ]
    )

    public poke: factory accu: accumulator = (
      clients doWithTuple: [:tuple |
        (tuple at: 2) <-: act: factory accu: accumulator.
        #noPromise ]
    )

    public disconnect: p = (
      poker:: p.

      clients doWithPromise: [:client |
        client <-: logout.
        #noPromise ]
    )
  )

  class Accumulator new: p expected: anInt turns: i = (
  | private turn = i.
    private actions = TransferArray new: 7 withAll: 0.
    private poker = p.
    private start = system ticks. (* Microseconds *)
    private duration ::= 0.0.
    private expected ::= anInt.
    private didStop ::= false.
  |)(
    public bump: anInt act: action = (
      recordAction: action.
      expected:: expected + anInt - 1
    )

    private recordAction: action = (
      action = #post         ifTrue: [ actions at: 1 put: 1 + (actions at: 1). ^ self ].
      action = #postDelivery ifTrue: [ actions at: 2 put: 1 + (actions at: 2). ^ self ].
      action = #leave        ifTrue: [ actions at: 3 put: 1 + (actions at: 3). ^ self ].
      action = #invite       ifTrue: [ actions at: 4 put: 1 + (actions at: 4). ^ self ].
      action = #compute      ifTrue: [ actions at: 5 put: 1 + (actions at: 5). ^ self ].
      action = #ignore       ifTrue: [ actions at: 6 put: 1 + (actions at: 6). ^ self ].
      action = #error        ifTrue: [ actions at: 7 put: 1 + (actions at: 7). ^ self ].

      actions at: 8 put: 1 + (actions at: 8)
    )

    public stop: action = (
      recordAction: action.

      expected:: expected - 1.
      expected = 0 ifTrue: [
        | end |
        end:: system ticks.
        duration:: (end - start) // 1000.0.
        didStop:: true.

        (* TODO replace *)
        (* poker <-: confirm: turn duration: duration *)
        poker <-: confirm.
        #noPromise ]
    )

    (* TODO delete *)
    public print: poker i: i j: j = (
      poker <-: collect: i j: j duration: duration actions: actions.
      #noPromise
    )
  )

  class Poker clients: clients turns: numTurns directories: dirs befriend: befriend factory: factory = (
  | private actions = Array new: 7 withAll: 0.
    private clients = clients.
    private befriend = befriend.
    private dirs = dirs.
    private logouts ::= 0.
    private confirmations ::= 0.
    private turns ::= numTurns.
    private iteration ::= 1.
    private rand ::= nil.
    private directories <Promise[Directory]> ::= nil.
    private runtimes ::= Vector new.
    private accumulations ::= 0.
    private finals = Vector new.
    private factory = factory.
    private bench ::= nil.
    private last ::= false.
    private turnSeries ::= Vector new.
    (*  TODO replace
    private turnSeries = Array new: numTurns. *)
  |)(
    public start: aBench isLast: isLast = (
      confirmations:: turns.
      bench:: aBench.
      last:: isLast.
      accumulations:: 0.
      rand:: SimpleRand new: 42.

      directories:: Array new: dirs withAll: [
        (actors createActorFromValue: Directory) <-: new: rand next with: befriend ].

      logouts:: directories size.

      finals append: (Array new: turns withAll: 0.0).

      0 to: clients - 1 do: [:clientId |
        | index |
        index:: (clientId % directories size) + 1.

        (directories at: index) <-: login: clientId.
        #noPromise ].

      befriend > 0 ifTrue: [
        directories do: [:directory |
          directory <-: befriend.
          #noPromise ] ].

      1 to: turns do: [:i |
        | accumulator = (actors createActorFromValue: Accumulator) <-: new: self expected: clients turns: i. |
        directories do: [:d |
          d <-: poke: factory accu: accumulator.
          #noPromise ].

        runtimes append: accumulator ].
    )

    (* TODO replace
    public confirm: turn duration: duration = (
      (turnSeries at: turn) == nil
        ifTrue: [ ('Error turn ' + turn + ' already has value:' + duration) println ].
      turnSeries at: turn put: duration.*)

    public confirm = (
      confirmations:: confirmations - 1.
      confirmations = 0 ifTrue: [
        directories do: [:d |
          d <-: disconnect: self.
          #noPromise ] ]
    )

    public finished = (
      logouts:: logouts - 1.
      logouts = 0 ifTrue: [
        | turn ::= 1. |
        runtimes do: [:accumulator |
          accumulations:: accumulations + 1.
          accumulator <-: print: self i: iteration j: turn.
          turn:: turn + 1 ].

        runtimes:: Vector new ]
    )

    public collect: i j: j duration: duration actions: actionArr <TransferArray> = (
      1 to: 7 do: [:i |
        actions at: i put: (actions at: i) + (actionArr at: i) ].


      (finals at: i) at: j put: duration.
      turnSeries append: duration.

      accumulations:: accumulations - 1.
      accumulations = 0 ifTrue: [
        iteration:: iteration + 1.

        bench <-: complete: self isLast: last.
        #noPromise ].
    )

    public printStatistics = (
      | stats turnValues qos qualityOfService |
      last ifFalse: [ self error: 'printStatistics is only to be triggered on last turn.'].

      stats:: SampleStats new: turnSeries.
      turnSeries:: Vector new: turnSeries size.
      turnValues:: Vector new.
      qos:: Vector new.

      1 to: turns do: [:k |
        | kTurnValues |
        turnValues size < k
          ifTrue: [
            kTurnValues:: Vector new.
            turnValues append: kTurnValues ]
          ifFalse: [
            self error: 'unexpected, really'.
            kTurnValues:: turnValues at: k ].

        finals do: [:iArr |
          iArr size >= k ifTrue: [
            kTurnValues append: (iArr at: k) ] ] ].

        turnValues size timesRepeat: [
          qos append: (SampleStats new: turnValues remove) stddev ].

        qualityOfService:: (SampleStats new: qos) median asString.

        'Turns,' print.
        stats mean print.       ',' print.
        stats median print.     ',' print.
        stats err print.        ',' print.
        stats stddev print.     ',' print.
        qualityOfService print.
        '' println.

        ('Post,'         + (actions at: 1)) println.
        ('PostDelivery,' + (actions at: 2)) println.
        ('Leave,'        + (actions at: 3)) println.
        ('Invite,'       + (actions at: 4)) println.
        ('Compute,'      + (actions at: 5)) println.
        ('Ignore,'       + (actions at: 6)) println.
        ['Error,'        + (actions at: 7)] println.
        ('None,'         + (actions at: 8)) println.
    )
  )

  public class Config new: args = TransferObject (
  | private args = args.
    public clients  ::= 1024.
    public numDirs  ::= 8.
    public turns    ::= 32.
    public compute  ::= 55.
    public post     ::= 25.
    public leave    ::= 10.
    public invite   ::= 10.
    public befriend ::= 10.

    public parseable ::= false.
  |
    readConfig
  )(
    private readConfig = (
      | i sum |
      i:: 1.

      [ i <= args size ] whileTrue: [
        | arg |
        arg:: args at: i.
        arg = '-c' ifTrue: [ clients::   (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-d' ifTrue: [ numDirs::   (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-t' ifTrue: [ turns::     (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-m' ifTrue: [ compute::   (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-p' ifTrue: [ post::      (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-l' ifTrue: [ leave::     (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-i' ifTrue: [ invite::    (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-be' ifTrue: [ befriend::  (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-parse' ifTrue: [ parseable:: true ].

        i:: i + 1 ].

      numDirs > clients ifTrue: [
        ('Invalid arguments! Cannot have more directories (' + numDirs + ') than clients ('+ clients +')') println.
        system exit: 1 ].

      clients < (numDirs * 2) ifTrue: [
        ('Invalid arguments! Need to have 2x as many dictionaries (' + numDirs + ') so that clients ('+ clients +') have at least 1 friend') println.
        system exit: 1 ].

      sum:: compute + post + leave + invite.
      sum <> 100 ifTrue: [
        'Invalid arguments! Sum of probabilities != 100.' print.
        ' It is: ' print. sum println.
        system exit: 1 ].
    )

    public print = (
      'Configuration ChatApp Benchmark' println.
      '\tclients:     ' print. clients println.
      '\tdirectories: ' print. numDirs println.
      '\tturns:       ' print. turns println.
      '\tcompute:     ' print. compute println.
      '\tpost:        ' print. post println.
      '\tleave:       ' print. leave println.
      '\tinvite:      ' print. invite println.
      '\tbefriend:    ' print. befriend println.
      '\tparseable:   ' print. parseable println.
    )
  )

  class ChatApp new: cfg = (
  | private clients = cfg clients.
    private factory = BehaviorFactory new: cfg compute
                          post: cfg post leave: cfg leave invite: cfg invite.
    private poker =
      (actors createActorFromValue: Poker)
        <-: clients: clients turns: cfg turns directories: cfg numDirs
           befriend: cfg befriend factory: factory.
  |
  )(
    public run: benchmark isLast: last = (
      poker <-: start: benchmark isLast: last.
      #noPromise
    )
  )


  class SampleStats new: samples = (
  | private samples = samples.
  |)(
    private sum = (
      | result |
      result:: 0.0.
      samples do: [:s | result:: result + s ].
      ^ result
    )

    public mean = (
      ^ sum // samples size
    )

    public median = (
      | middle size |
      samples isEmpty ifTrue: [ ^ 0.0 ].
      size:: samples size.

      middle:: size / 2.
      ^ (size % 2) = 1
        ifTrue: [ samples at: middle + 1 ]
        ifFalse: [ ((samples at: middle) + (samples at: middle + 1)) // 2 ]
    )

    public stddev = (
      | m temp |
      m:: mean.
      temp:: 0.0.

      samples do: [:s |
        temp:: temp + ((m - s) * (m - s)) ].

      ^ (temp // samples size) sqrt
    )

    public err = (
      | m = mean. |
      ^ 100.0 * ((confidenceHigh - m) // m)
    )

    private confidenceHigh = (
      ^ mean + 1.96 * (stddev // samples size sqrt)
    )
  )

  class Result new: parseable = (
  | private samples <Vector[Double]> = Vector new.
  |)(
    public record: milliSeconds <Double> = (
      samples append: milliSeconds
    )

    public summarize: poker isLast: last = (
      | stats = SampleStats new: samples. |

      'Chat App,' print.
      stats mean print.       ',' print.
      stats median print.     ',' print.
      stats err print.        ',' print.
      stats stddev print.
      '' println.

      last ifFalse: [ self error: 'summarize is only expected for last turn.'].
      poker <-: printStatistics
    )
  )

  class Runner new: cfg = (
  | private configuration = cfg.
    private benchmark
    private result = Result new: cfg parseable.

    private iterations

    private running ::= false.
    private summarize ::= false.
    private startTime ::= 0.
    private endTime ::= 0.

    private completionR
  |)(
    public start: iter = (
      | pp |
      pp:: actors createPromisePair.
      completionR:: pp resolver.

      benchmark:: ChatApp new: configuration.
      iterations:: iter.
      next: nil isLast: false.
      ^ pp promise
    )

    private next: poker isLast: last = (
      running ifTrue: [ ^ self ].

      summarize ifTrue: [
        (*'Runner.summarize' println.*)
        result summarize: poker isLast: last.
        summarize:: false ].

      iterations > 0
        ifTrue: [
          running:: true.

          startTime:: system ticks.

          (* 'Runner.run: ' print. iterations println. *)

          benchmark run: self isLast: iterations = 1.
          iterations:: iterations - 1.
          summarize:: iterations = 0 ]
        ifFalse: [
          completionR resolve: 0 ]
    )

    public complete: aPoker isLast: last = (
      endTime:: system ticks.
      running:: false.
      result record: (endTime - startTime) // 1000.0.
      (* ('Total: ' + (endTime - startTime) + 'us') println. *)
      next: aPoker isLast: last.
    )
  )

  public main: args = (
    | cfg runner simpleRand dice |
    (*simpleRand:: SimpleRand new: 42.
    dice:: DiceRoll new: simpleRand.

    0 to: 2000000 do: [:i |
      (' seed: ' + dice seed + ' bool: ' + (dice next: 50)) println ].

    system exit: 0.*)

    cfg:: Config new: args.
    (* cfg print. *)
    runner:: (actors createActorFromValue: Runner) <-: new: cfg.
    ^ (runner <-: start: 32)
  )
)
